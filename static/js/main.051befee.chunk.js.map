{"version":3,"sources":["components/CurrentWeather.js","components/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentWeather","data","className","name","class","main","temp","feels_like","weather","description","Forecast","curr","Date","currday","Intl","DateTimeFormat","weekday","format","console","log","ResponsiveContainer","width","height","LineChart","list","margin","top","left","right","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","city","type","stroke","activeDot","r","dot","App","useState","latitude","setLatitude","longitude","setLongitude","weatherData","setWeatherData","weatherData2","setWeatherData2","savePositionToState","position","coords","fetchWeather","a","window","navigator","geolocation","getCurrentPosition","axios","get","res","fiveday","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.051befee.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n\r\nfunction CurrentWeather({data}) {\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Current weather in  {data.name}</h1>\r\n      <h2>temperature: <strong class=\"temp_number\">{data.main && data.main.temp}°C</strong></h2>\r\n      <h2>feels like: <strong class=\"temp_number\">{data.main && data.main.feels_like}°C</strong></h2>\r\n      <h2>probably: <strong class=\"temp_number\">{data.weather && data.weather[0].description}</strong></h2>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default CurrentWeather;","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  LineChart,\r\n  Label,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  Legend\r\n} from \"recharts\";\r\n\r\n\r\nfunction Forecast({data}) {\r\n\r\n  var curr = new Date();\r\n  var options = { weekday: 'long'};\r\n  let currday = new Intl.DateTimeFormat('en-US', options).format(curr);\r\n  console.log(currday)\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>5 days forecast chart</h1>\r\n      <ResponsiveContainer  width='100%' height={300}>\r\n      <LineChart\r\n      data={data.list}\r\n      margin={{\r\n        top: 0, left: 0, right: 0, bottom: 0 \r\n    }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"15 30\" />\r\n      <XAxis dataKey=\"dt_txt\" />\r\n      <YAxis width={25} />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line\r\n      name={data && data.city.name + \" temperature\"}\r\n        type=\"monotone\"\r\n        dataKey=\"main.temp\"\r\n        stroke=\"#8884d8\"\r\n        activeDot={{ r: 5 }}\r\n        dot={{r:2}}\r\n      />\r\n        <Line\r\n      name={data && data.city.name + \" feels like\"}\r\n        type=\"monotone\"\r\n        dataKey=\"main.feels_like\"\r\n        stroke=\"rgb(65, 176, 255)\"\r\n        activeDot={{ r: 5 }}\r\n        dot={{r:2}}\r\n      />\r\n    </LineChart>\r\n    </ ResponsiveContainer>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default Forecast;","import axios from \"axios\"\nimport { useEffect, useState } from \"react\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport Forecast from \"./components/Forecast\"\nimport './style/App.scss';\n\nfunction App() {\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weatherData, setWeatherData] = useState(0);\n  const [weatherData2, setWeatherData2] = useState(0);\n  let savePositionToState = (position) => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  }\n\n  const fetchWeather = async() => {\ntry{\n\n  window.navigator.geolocation.getCurrentPosition(savePositionToState);\n    const res = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=1039cf2e872c4c85f955bf923ace09ea&units=metric`\n      );\n      setWeatherData(res.data);\n      const fiveday = await axios.get(\n        `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=1039cf2e872c4c85f955bf923ace09ea&units=metric`\n        );\n        setWeatherData2(fiveday.data);\n}catch(err)\n{\n  console.log(err);\n}\n  }\n\n  useEffect(() => {\n    fetchWeather();\n  }, [latitude,longitude])\n\n  return (\n    \n    <div className=\"main-component\">\n    <div className=\"App\">\n      <CurrentWeather data={weatherData}/>\n        <Forecast data={weatherData2}/>\n    </div></div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}